<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:db-testcontainers="http://www.mulesoft.org/schema/mule/db-testcontainers" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/db-testcontainers http://www.mulesoft.org/schema/mule/db-testcontainers/current/mule-db-testcontainers.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <spring:beans>
        <spring:import resource="classpath:common-connectors.xml"/>
        <spring:import resource="classpath:api.xml"/>
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <db-testcontainers:config name="DB_TestContainers__Configuration" url="${db.url}" username="${db.user}" password="${db.password}" doc:name="DB TestContainers: Configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8081" basePath="/api" doc:name="HTTP Request Configuration"/>
    <munit:before-suite name="api-test-suiteBefore_Suite" description="MUnit Test">
        <db-testcontainers:start-db-container config-ref="DB_TestContainers__Configuration" doc:name="DB TestContainers"/>
    </munit:before-suite>
<!--     <munit:before-test name="api-apikit-testBefore_Test" description="Before tests actions"> -->
<!--         <db-testcontainers:run-init-script config-ref="DB_TestContainers__Configuration" doc:name="DB TestContainers"/> -->
<!--     </munit:before-test> -->
    <munit:after-suite name="api-test-suiteAfter_Suite" description="Ater suite actions">
        <db-testcontainers:stop-db-container config-ref="DB_TestContainers__Configuration" doc:name="DB TestContainers"/>
    </munit:after-suite>
    <munit:test name="get:/library/books:api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/library/books:api-config-200-application/json]">
        <db:bulk-execute config-ref="MySQL_Configuration" doc:name="Database"><![CDATA[INSERT INTO books
(
title,
description,
price,
total_quantity,
available_quantity,
create_timestamp)
VALUES
(
'My First Book',
'This is my first book.',
20,
10,
10,
'2018-01-28T05:00:00');

INSERT INTO books
(
title,
description,
price,
total_quantity,
available_quantity,
create_timestamp)
VALUES
(
'My Second Book',
'This is my second book.',
30,
40,
40,
'2018-01-28T05:05:00');]]></db:bulk-execute>
        <http:request config-ref="HTTP_Request_Configuration" path="/library/books" method="GET" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_library_books_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected"/>
    </munit:test>
    <munit:test name="get:/library/books/bookId:api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/library/books/bookId:api-config-200-application/json]">
        <db:insert config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[INSERT INTO books
(
title,
description,
price,
total_quantity,
available_quantity,
create_timestamp)
VALUES
(
'My First Book',
'This is my first book.',
20,
10,
10,
'2018-01-28T05:00:00')]]></db:parameterized-query>
        </db:insert>
        <http:request config-ref="HTTP_Request_Configuration" path="/library/books/{bookId}" method="GET" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="bookId" value="1"/>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200"/>
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_library_books_{bookid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected"/>
    </munit:test>
    <munit:test name="get:/library/books/bookId:api-config-404--FlowTest" description="Verifying functionality of [get:/library/books/bookId:api-config-404-]">
        <http:request config-ref="HTTP_Request_Configuration" path="/library/books/{bookId}" method="GET" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="bookId" value="100"/>
            </http:request-builder>
            <http:success-status-code-validator values="404"/>
        </http:request>
        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(404))]" doc:name="assert that - http.status eq 404"/>
    </munit:test>
    <munit:test name="post:/library/books:application/json:api-config-201--FlowTest" description="Verifying functionality of [post:/library/books:application/json:api-config-201-]">
        <set-payload value="#[getResource('scaffolder/request/post_library_books_application_json.json').asString()]" doc:name="Set Payload"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/library/books" method="POST" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="bookId" value="1"/>
                <http:header headerName="Content-Type" value="application/json"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(201))]" doc:name="assert that - http.status eq 201"/>
        <munit:assert-on-equals expectedValue="4" actualValue="#[message.inboundProperties['X-BookId']]" doc:name="Assert new book id"/>
    </munit:test>
    <munit:test name="get-user-greetingTest" description="Test">
        <mock:when messageProcessor="file:outbound-endpoint" doc:name="Mock">
            <mock:then-return payload="#[samePayload()]"/>
        </mock:when>
        <mock:spy messageProcessor="file:outbound-endpoint" doc:name="Spy">
            <mock:assertions-before-call>
                <munit:assert-on-equals expectedValue="#['Hello Manik']" actualValue="#[payload]" doc:name="Assert Equals"/>
            </mock:assertions-before-call>
        </mock:spy>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:invocation-properties>
                <munit:invocation-property key="userName" value="Manik"/>
            </munit:invocation-properties>
        </munit:set>
        <flow-ref name="get-user-greeting" doc:name="Flow-ref to get-user-greeting"/>
    </munit:test>
</mule>
